name: 📝 Automatic Blog Content Generator

on:
  schedule:
    # Heti 3x futás: Hétfő, Szerda, Péntek 07:00 UTC (09:00 CET)
    - cron: '0 7 * * 1,3,5'
  
  # Manual trigger lehetőség
  workflow_dispatch:
    inputs:
      max_posts:
        description: 'Maximum posts to generate'
        required: false
        default: '3'
        type: number

env:
  NODE_VERSION: '20'

jobs:
  generate-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: |
          npm init -y
          npm install @octokit/rest node-fetch@2 yaml slugify

      - name: 🤖 Generate Blog Posts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          MAX_POSTS: ${{ github.event.inputs.max_posts || 2 }}
        run: node scripts/generate-blog.js

      - name: 📁 Create Blog Directory Structure
        run: |
          mkdir -p blog
          ls -la blog/ || echo "Blog directory created"

      - name: 🔍 Check for Changes
        id: changes
        run: |
          if git diff --quiet && git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No new content generated"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "New content generated:"
            git status --porcelain
          fi

      - name: 📝 Configure Git
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config user.name "content-bot[bot]"
          git config user.email "content-bot[bot]@users.noreply.github.com"

      - name: 🌿 Create Feature Branch
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          BRANCH_NAME="content/auto-blog-$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME

      - name: ➕ Commit Changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git add blog/
          git add .github/ || true
          git commit -m "🤖 chore(content): auto-generated blog posts

          Generated by: GitHub Actions
          Workflow: content-generator.yml
          Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          📝 Generated files:
          $(git diff --cached --name-only | grep -E '\.(html|md)$' | head -10)
          
          🔗 URL Structure: blog/{slug}"

      - name: 🚀 Push Feature Branch
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git push origin $BRANCH_NAME

      - name: 📋 Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "🤖 Auto-generated blog content"
          body: |
            ## 🤖 Automatikusan Generált Blog Tartalom
            
            Ez a PR automatikusan generált blog cikkeket tartalmaz a GitHub Issues alapján.
            
            ### 📝 Generált fájlok:
            - Új blog cikkek: `blog/{slug}.html` formátumban
            - SEO optimalizált meta tagek
            - JSON-LD Schema markup
            - Belső cross-linkek
            
            ### ✅ Quality Checklist:
            - [ ] Tartalom minőség ellenőrzése
            - [ ] Brand voice konzisztencia
            - [ ] SEO elemek validálása
            - [ ] Linkek működésének tesztelése
            - [ ] Mobile responsive megjelenítés
            - [ ] Helyesírás ellenőrzése
            
            ### 🔗 URL Structure:
            Minden új cikk: `https://domain.hu/blog/{slug}`
            
            ### 🚀 Deploy után:
            - Automatikus sitemap frissítés
            - RSS feed frissítés
            - Social media sharing ready
            
            ---
            
            **⚠️ Fontos:** Ez automatikusan generált tartalom. Kérlek, alaposan ellenőrizd mielőtt merge-eli!
            
            Generated at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          labels: |
            content
            ai-generated
            needs-review
          draft: false

      - name: 📊 Summary Report
        if: always()
        run: |
          echo "## 📊 Content Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** content-generator.yml" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes:** ${{ steps.changes.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
            echo "### ✅ Generated Content:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            git log --oneline -1 || echo "No commits yet"
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **URL Structure:** \`blog/{slug}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ No Content Generated" >> $GITHUB_STEP_SUMMARY
            echo "No open issues with label \`blog:generate\` found or content generation failed." >> $GITHUB_STEP_SUMMARY
          fi

  close-completed-issues:
    needs: generate-content
    runs-on: ubuntu-latest
    if: needs.generate-content.result == 'success'
    permissions:
      issues: write
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Install Dependencies
        run: npm install @octokit/rest

      - name: ✅ Close Processed Issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          node -e "
          const { Octokit } = require('@octokit/rest');
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
          
          async function closeProcessedIssues() {
            console.log('🔍 Checking for processed issues...');
            const { data: issues } = await octokit.rest.issues.listForRepo({
              owner, repo,
              state: 'open',
              labels: 'blog:generate,processed'
            });
            
            for (const issue of issues) {
              await octokit.rest.issues.update({
                owner, repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              await octokit.rest.issues.createComment({
                owner, repo,
                issue_number: issue.number,
                body: '✅ **Blog post generated successfully!**\n\nContent has been created and is pending review in a Pull Request.\n\n🔗 URL: \`blog/' + (issue.body.match(/slug.*?:\s*(.+)/i)?.[1] || 'generated-content') + '\`'
              });
              
              console.log(\`✅ Closed issue #\${issue.number}: \${issue.title}\`);
            }
          }
          
          closeProcessedIssues().catch(console.error);
          "