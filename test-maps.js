const { chromium } = require('playwright');
const path = require('path');

async function testGoogleMapsExample() {
    console.log('üöÄ Google Maps p√©lda tesztel√©se Playwright-tal...\n');

    // B√∂ng√©sz≈ë ind√≠t√°sa
    const browser = await chromium.launch({ 
        headless: false,  // L√°that√≥ b√∂ng√©sz≈ë
        slowMo: 1000      // Lass√≠tott m≈±k√∂d√©s (1 m√°sodperc k√©s√©s)
    });

    const context = await browser.newContext({
        viewport: { width: 1200, height: 800 }
    });

    const page = await context.newPage();

    try {
        // HTML f√°jl megnyit√°sa
        const filePath = path.resolve(__dirname, 'google-maps-example.html');
        const fileUrl = `file:///${filePath.replace(/\\/g, '/')}`;
        
        console.log(`üìÑ HTML f√°jl bet√∂lt√©se: ${fileUrl}`);
        await page.goto(fileUrl);

        // Oldal c√≠m√©nek ellen≈ërz√©se
        const title = await page.title();
        console.log(`üìã Oldal c√≠me: ${title}`);

        // Fejl√©c sz√∂veg√©nek ellen≈ërz√©se
        const headerText = await page.textContent('h1');
        console.log(`üè∑Ô∏è F≈ëc√≠m: ${headerText}`);

        // V√°rakoz√°s az oldal bet√∂lt√©s√©re
        await page.waitForTimeout(3000);

        // Ellen≈ërizz√ºk hogy megjelennek-e a vez√©rl≈ëk
        console.log('\nüîß UI elemek ellen≈ërz√©se...');
        
        const searchInput = await page.isVisible('#searchInput');
        console.log(`üîç Keres≈ëmez≈ë: ${searchInput ? '‚úÖ Megtal√°lhat√≥' : '‚ùå Hi√°nyzik'}`);

        const mapTypeSelect = await page.isVisible('#mapType');
        console.log(`üó∫Ô∏è T√©rk√©p t√≠pus v√°laszt√≥: ${mapTypeSelect ? '‚úÖ Megtal√°lhat√≥' : '‚ùå Hi√°nyzik'}`);

        const mapContainer = await page.isVisible('#map');
        console.log(`üìç T√©rk√©p kont√©ner: ${mapContainer ? '‚úÖ Megtal√°lhat√≥' : '‚ùå Hi√°nyzik'}`);

        // Gombok ellen≈ërz√©se
        const buttons = ['Keres√©s', 'Jel√∂l≈ë hozz√°ad√°sa', 'Jel√∂l≈ëk t√∂rl√©se', 'Saj√°t helysz√≠n'];
        for (const buttonText of buttons) {
            const button = await page.isVisible(`text="${buttonText}"`);
            console.log(`üîò "${buttonText}" gomb: ${button ? '‚úÖ Megtal√°lhat√≥' : '‚ùå Hi√°nyzik'}`);
        }

        // Tesztelj√ºk a keres≈ë funkci√≥t
        console.log('\nüîç Keres≈ë funkci√≥ tesztel√©se...');
        await page.fill('#searchInput', 'Budapest, Sz√©chenyi t√©r');
        console.log('üìù Keres≈ëbe be√≠rtam: "Budapest, Sz√©chenyi t√©r"');

        // Enter billenty≈± szimul√°l√°sa
        await page.press('#searchInput', 'Enter');
        console.log('‚å®Ô∏è Enter billenty≈± lenyomva');

        await page.waitForTimeout(2000);

        // T√©rk√©p t√≠pus v√°lt√°s tesztel√©se
        console.log('\nüó∫Ô∏è T√©rk√©p t√≠pus v√°lt√°s tesztel√©se...');
        await page.selectOption('#mapType', 'satellite');
        console.log('üõ∞Ô∏è M≈±holdas n√©zetre v√°ltottam');

        await page.waitForTimeout(2000);

        await page.selectOption('#mapType', 'terrain');
        console.log('üèîÔ∏è Domborzati n√©zetre v√°ltottam');

        await page.waitForTimeout(2000);

        await page.selectOption('#mapType', 'roadmap');
        console.log('üõ£Ô∏è K√∂z√∫ti n√©zetre visszav√°ltottam');

        // Jel√∂l≈ëk t√∂rl√©se gomb tesztel√©se
        console.log('\nüóëÔ∏è Jel√∂l≈ëk t√∂rl√©se funkci√≥ tesztel√©se...');
        await page.click('text="Jel√∂l≈ëk t√∂rl√©se"');
        console.log('üîò "Jel√∂l≈ëk t√∂rl√©se" gombra kattintottam');

        await page.waitForTimeout(2000);

        // Jel√∂l≈ë hozz√°ad√°sa gomb tesztel√©se
        console.log('\nüìç Jel√∂l≈ë hozz√°ad√°sa funkci√≥ tesztel√©se...');
        await page.click('text="Jel√∂l≈ë hozz√°ad√°sa"');
        console.log('üîò "Jel√∂l≈ë hozz√°ad√°sa" gombra kattintottam');

        await page.waitForTimeout(2000);

        // K√©perny≈ëk√©p k√©sz√≠t√©se
        console.log('\nüì∏ K√©perny≈ëk√©p k√©sz√≠t√©se...');
        await page.screenshot({ 
            path: 'google-maps-screenshot.png',
            fullPage: true
        });
        console.log('üíæ K√©perny≈ëk√©p elmentve: google-maps-screenshot.png');

        // API kulcs hi√°nyzik ellen≈ërz√©s
        console.log('\n‚ö†Ô∏è API kulcs ellen≈ërz√©se...');
        const apiWarning = await page.isVisible('text="Google Maps API kulcs sz√ºks√©ges"');
        if (apiWarning) {
            console.log('üîë API kulcs hi√°nyzik - ez v√°rhat√≥, mivel demo verzi√≥');
            console.log('üí° A t√©rk√©p hely√©n megjelenik az √∫tmutat√≥ az API kulcs beszerz√©s√©hez');
        } else {
            console.log('‚úÖ API kulcs rendben, vagy a t√©rk√©p bet√∂lt≈ëd√∂tt');
        }

        // V√°rakoz√°s a v√©gs≈ë √°llapot megtekint√©s√©re
        console.log('\n‚è≥ 5 m√°sodperc v√°rakoz√°s a v√©gs≈ë √°llapot megtekint√©s√©hez...');
        await page.waitForTimeout(5000);

        console.log('\n‚úÖ Teszt sikeresen lefutott!');
        console.log('üìã √ñsszefoglal√≥:');
        console.log('   - HTML oldal bet√∂ltve');
        console.log('   - UI elemek megtal√°lhat√≥k');
        console.log('   - Keres≈ëmez≈ë m≈±k√∂dik');
        console.log('   - T√©rk√©p t√≠pus v√°lt√°s m≈±k√∂dik');
        console.log('   - Gombok kattinthat√≥k');
        console.log('   - K√©perny≈ëk√©p elk√©sz√≠tve');

    } catch (error) {
        console.error('‚ùå Hiba t√∂rt√©nt a teszt sor√°n:', error.message);
    } finally {
        // B√∂ng√©sz≈ë bez√°r√°sa
        console.log('\nüîö B√∂ng√©sz≈ë bez√°r√°sa...');
        await browser.close();
    }
}

// Teszt futtat√°sa
testGoogleMapsExample().catch(console.error);